#!/bin/bash

COMMAND=$(echo "$1" | tr 'A-Z' 'a-z')
APP_NAME="accounting-system"
# Directory where the application is installed
APP_DIR="/var/www/$APP_NAME"

# Determine domain and access information
get_domain() {
  grep -oP 'server_name\s+\K[^;]+' \
    "/etc/nginx/sites-available/$APP_NAME" 2>/dev/null | head -n1
}

print_access_info() {
  local domain=$(get_domain)
  [ -z "$domain" ] && domain="localhost"
  local ip_address=$(hostname -I | awk '{print $1}')
  local ssl_enabled="false"
  grep -q 'listen 443' "/etc/nginx/sites-available/$APP_NAME" 2>/dev/null && ssl_enabled="true"

  echo ""
  echo "Access the application via:"
  echo " - HTTP:  http://$domain (IP: $ip_address, port 80)"
  if [ "$ssl_enabled" = "true" ]; then
    echo " - HTTPS: https://$domain (IP: $ip_address, port 443)"
  fi
}

print_service_status() {
  local db_status=$(systemctl is-active postgresql || true)
  local redis_status=$(systemctl is-active redis-server || true)
  local nginx_status=$(systemctl is-active nginx || true)
  local pm2_status=$(pm2 status "$APP_NAME" | grep -q online && echo "online" || echo "offline")

  echo "==== Service Status ===="
  echo "Database service: $db_status"
  echo "Redis service: $redis_status"
  echo "Web service (Nginx): $nginx_status"
  echo "PM2 process '$APP_NAME': $pm2_status"
  print_access_info
}

display_logs() {
  echo "==== Latest Logs ===="
  echo "-- Nginx --"
  sudo tail -n 20 /var/log/nginx/error.log 2>/dev/null || true

  echo "\n-- PostgreSQL --"
  local pg_log
  pg_log=$(ls /var/log/postgresql/postgresql-*.log 2>/dev/null | sort | tail -n 1)
  [ -n "$pg_log" ] && sudo tail -n 20 "$pg_log" 2>/dev/null || true

  echo "\n-- UFW Firewall --"
  sudo tail -n 20 /var/log/ufw.log 2>/dev/null || true

  echo "\n-- Fail2Ban --"
  sudo tail -n 20 /var/log/fail2ban.log 2>/dev/null || true

  echo "\n-- PM2/Application --"
  tail -n 20 ~/.pm2/logs/${APP_NAME}-out.log 2>/dev/null || true
  tail -n 20 ~/.pm2/logs/${APP_NAME}-error.log 2>/dev/null || true
}

# Check firewall status and apply updates if needed
firewall_check_update() {
  echo "==== Firewall Status ===="
  local need_update=false

  if ! command -v ufw >/dev/null; then
    echo "UFW not installed."
    need_update=true
  else
    local fw_status
    fw_status=$(sudo ufw status 2>/dev/null | head -n1)
    echo "UFW status: $fw_status"
    [[ "$fw_status" == "Status: inactive" ]] && need_update=true

    for p in 22 80 443 3000 5432 6379 9090 9100; do
      sudo ufw status | grep -q "$p" || need_update=true
    done
  fi

  if [ "$need_update" = true ]; then
    echo "Applying firewall configuration..."
    if ! command -v ufw >/dev/null; then
      sudo apt-get update
      sudo apt-get install -y ufw
    fi
    sudo ufw allow 22
    sudo ufw allow 80
    sudo ufw allow 443
    sudo ufw allow 3000
    sudo ufw allow 5432
    sudo ufw allow 6379
    sudo ufw allow 9090
    sudo ufw allow 9100
    sudo ufw --force enable
  fi

  sudo ufw status verbose
}

# Check web server status and apply updates if needed
webserver_check_update() {
  echo "==== Web Server Status ===="
  local need_update=false

  if ! command -v nginx >/dev/null; then
    echo "Nginx not installed."
    need_update=true
  fi

  local status
  status=$(systemctl is-active nginx || true)
  echo "Nginx service: $status"
  [ "$status" != "active" ] && need_update=true

  if [ ! -f "/etc/nginx/sites-available/$APP_NAME" ]; then
    echo "Nginx configuration missing."
    need_update=true
  fi

  if [ "$need_update" = true ]; then
    echo "Applying web server configuration..."
    if ! command -v nginx >/dev/null; then
      sudo apt-get update
      sudo apt-get install -y nginx
    fi

    local domain
    domain=$(get_domain)
    [ -z "$domain" ] && domain="localhost"
    sudo tee /etc/nginx/sites-available/$APP_NAME >/dev/null <<EOL
server {
    listen 80;
    server_name $domain;
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOL
    sudo ln -sf /etc/nginx/sites-available/$APP_NAME /etc/nginx/sites-enabled/
  fi

  sudo nginx -t && sudo systemctl restart nginx
}

# Display usage information
show_help() {
  cat <<EOF
NexAccount - manage the accounting system

Usage: NexAccount <command>

Commands:
  Start      Start the application and show status information
  Stop       Stop the application
  Restart    Restart the application and show status information
  Status     Display the current service status and access URLs
  Update     Pull latest code, install dependencies and restart
  DbUpdate   Verify database structure and update related files
  Firewall   Ensure UFW firewall is configured and running
  Webserver  Ensure Nginx is configured and running
  Delete     Remove the PM2 process
  Log        Display recent service logs
  Help       Show this help message

EOF
}

# Always operate from the application directory
cd "$APP_DIR" 2>/dev/null || {
  echo "Application directory $APP_DIR not found"
  exit 1
}

case "$COMMAND" in
  start)
    pm2 start ecosystem.config.js
    print_service_status
    ;;
  stop)
    pm2 stop "$APP_NAME"
    ;;
  restart)
    pm2 restart "$APP_NAME"
    print_service_status
    ;;
  status)
    print_service_status
    ;;
  update)
    git pull && pnpm install && pm2 restart "$APP_NAME"
    ;;
  dbupdate)
    NEED_UPDATE=false
    echo "Verifying database structure..."
    pnpm run init-db || NEED_UPDATE=true

    FILES=("lib/db.ts" "next.config.mjs" "docker-compose.yml")
    for f in "${FILES[@]}"; do
      [ -f "$APP_DIR/$f" ] || NEED_UPDATE=true
    done

    echo "Generating static pages..."
    pnpm build || NEED_UPDATE=true
    [ -d "$APP_DIR/.next" ] || NEED_UPDATE=true

    if [ "$NEED_UPDATE" = true ]; then
      echo "Discrepancies found. Updating database-related files from Git..."
      BRANCH=$(git rev-parse --abbrev-ref HEAD)
      git fetch origin "$BRANCH"
      git checkout "origin/$BRANCH" -- lib/db.ts next.config.mjs docker-compose.yml 2>/dev/null || true
      pnpm install || true
    fi

    echo "Applying database migrations..."
    pnpm migrate-db || true

    echo "Restarting services..."
    pm2 restart "$APP_NAME"
    systemctl restart postgresql redis-server nginx || true
    ;;
  firewall)
    firewall_check_update
    echo "Restarting related services..."
    pm2 restart "$APP_NAME"
    systemctl restart postgresql redis-server nginx || true
    ;;
  webserver)
    webserver_check_update
    echo "Restarting related services..."
    pm2 restart "$APP_NAME"
    systemctl restart postgresql redis-server nginx || true
    ;;
  delete)
    pm2 delete "$APP_NAME"
    ;;
  log|logs)
    display_logs
    ;;
  help|-h|--help|"")
    show_help
    ;;
  *)
    echo "Unknown command: $1"
    echo
    show_help
    exit 1
    ;;
esac

