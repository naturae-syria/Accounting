#!/bin/bash

COMMAND=$(echo "$1" | tr 'A-Z' 'a-z')
APP_NAME="accounting-system"
# Directory where the application is installed
APP_DIR="/var/www/$APP_NAME"

# Determine domain and access information
get_domain() {
  grep -oP 'server_name\s+\K[^;]+' \
    "/etc/nginx/sites-available/$APP_NAME" 2>/dev/null | head -n1
}

print_access_info() {
  local domain=$(get_domain)
  [ -z "$domain" ] && domain="localhost"
  local ip_address=$(hostname -I | awk '{print $1}')
  local ssl_enabled="false"
  grep -q 'listen 443' "/etc/nginx/sites-available/$APP_NAME" 2>/dev/null && ssl_enabled="true"

  echo ""
  echo "Access the application via:"
  echo " - HTTP:  http://$domain (IP: $ip_address, port 80)"
  if [ "$ssl_enabled" = "true" ]; then
    echo " - HTTPS: https://$domain (IP: $ip_address, port 443)"
  fi
}

print_service_status() {
  local db_status=$(systemctl is-active postgresql || true)
  local redis_status=$(systemctl is-active redis-server || true)
  local nginx_status=$(systemctl is-active nginx || true)
  local pm2_status=$(pm2 status "$APP_NAME" | grep -q online && echo "online" || echo "offline")

  echo "==== Service Status ===="
  echo "Database service: $db_status"
  echo "Redis service: $redis_status"
  echo "Web service (Nginx): $nginx_status"
  echo "PM2 process '$APP_NAME': $pm2_status"
  print_access_info
}

display_logs() {
  echo "==== Latest Logs ===="
  echo "-- Nginx --"
  sudo tail -n 20 /var/log/nginx/error.log 2>/dev/null || true

  echo "\n-- PostgreSQL --"
  local pg_log
  pg_log=$(ls /var/log/postgresql/postgresql-*.log 2>/dev/null | sort | tail -n 1)
  [ -n "$pg_log" ] && sudo tail -n 20 "$pg_log" 2>/dev/null || true

  echo "\n-- UFW Firewall --"
  sudo tail -n 20 /var/log/ufw.log 2>/dev/null || true

  echo "\n-- Fail2Ban --"
  sudo tail -n 20 /var/log/fail2ban.log 2>/dev/null || true

  echo "\n-- PM2/Application --"
  tail -n 20 ~/.pm2/logs/${APP_NAME}-out.log 2>/dev/null || true
  tail -n 20 ~/.pm2/logs/${APP_NAME}-error.log 2>/dev/null || true
}

# Always operate from the application directory
cd "$APP_DIR" 2>/dev/null || {
  echo "Application directory $APP_DIR not found"
  exit 1
}

case "$COMMAND" in
  start)
    pm2 start ecosystem.config.js
    print_service_status
    ;;
  stop)
    pm2 stop "$APP_NAME"
    ;;
  restart)
    pm2 restart "$APP_NAME"
    print_service_status
    ;;
  status)
    print_service_status
    ;;
  update)
    git pull && pnpm install && pm2 restart "$APP_NAME"
    ;;
  dbupdate)
    NEED_UPDATE=false
    echo "Verifying database structure..."
    pnpm run init-db || NEED_UPDATE=true

    FILES=("lib/db.ts" "next.config.mjs" "docker-compose.yml")
    for f in "${FILES[@]}"; do
      [ -f "$APP_DIR/$f" ] || NEED_UPDATE=true
    done

    echo "Generating static pages..."
    pnpm build || NEED_UPDATE=true
    [ -d "$APP_DIR/.next" ] || NEED_UPDATE=true

    if [ "$NEED_UPDATE" = true ]; then
      echo "Discrepancies found. Updating database-related files from Git..."
      BRANCH=$(git rev-parse --abbrev-ref HEAD)
      git fetch origin "$BRANCH"
      git checkout "origin/$BRANCH" -- lib/db.ts next.config.mjs docker-compose.yml 2>/dev/null || true
      pnpm install || true
    fi

    echo "Restarting services..."
    pm2 restart "$APP_NAME"
    systemctl restart postgresql redis-server nginx || true
    ;;
  delete)
    pm2 delete "$APP_NAME"
    ;;
  log|logs)
    display_logs
    ;;
  *)
    echo "Usage: NexAccount {Start|Stop|Restart|Status|Update|DbUpdate|Delete|Log}"
    exit 1
    ;;
 esac

